# Configure the incoming RabbitMQ queue `quote-requests`
mp.messaging.incoming.meter-data.connector=smallrye-rabbitmq
mp.messaging.incoming.meter-data.queue.name=meter-data
mp.messaging.incoming.meter-data.exchange.name=meter-data

# RabbitMQ connection properties for secure communication
mp.messaging.incoming.meter-data.connector-config.host=localhost
mp.messaging.incoming.meter-data.connector-config.port=5671  # Default port for RabbitMQ over TLS
mp.messaging.incoming.meter-data.connector-config.username=layblar
mp.messaging.incoming.meter-data.connector-config.password=password

# Enable TLS for RabbitMQ
mp.messaging.incoming.meter-data.connector-config.ssl.enabled=true
mp.messaging.incoming.meter-data.connector-config.ssl.keystore.location=/TLS/keystore.p12
mp.messaging.incoming.meter-data.connector-config.ssl.keystore.password=keystore-password
mp.messaging.incoming.meter-data.connector-config.ssl.alias=mykey

# Provide RabbitMQ with the public key for client certificate verification
mp.messaging.incoming.meter-data.connector-config.ssl.truststore.location=/TLS/public-key.crt

# datasource configuration
quarkus.datasource.db-kind = postgresql
quarkus.datasource.username = layblar
quarkus.datasource.password = password
quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/meterdata

# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=none

# jwt key locations
%dev.mp.jwt.verify.publickey.location=publicKey.pem
# jwt issuer
%dev.mp.jwt.verify.issuer=layblar

%dev.quarkus.http.port=8082